//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "XamlTypeInfo.g.h"

#include "AudioSettingsPane.xaml.h"
#include "GeneralSettingsPane.xaml.h"
#include "AboutSettingsPane.xaml.h"
#include "InputSettingsPane.xaml.h"
#include "App.xaml.h"
#include "DirectXPage.xaml.h"
#include "SelectROMPane.xaml.h"
#include "SelectStatePane.xaml.h"
#include "SnappedPane.xaml.h"
#include "VideoSettingsPane.xaml.h"

#include "AudioSettingsPane.g.hpp"
#include "GeneralSettingsPane.g.hpp"
#include "AboutSettingsPane.g.hpp"
#include "InputSettingsPane.g.hpp"
#include "App.g.hpp"
#include "DirectXPage.g.hpp"
#include "SelectROMPane.g.hpp"
#include "SelectStatePane.g.hpp"
#include "SnappedPane.g.hpp"
#include "VideoSettingsPane.g.hpp"

::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::OtherProviders::get()
{
    if(_otherProviders == nullptr)
    {
        _otherProviders = ref new ::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>();
    }
    return _otherProviders;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CheckOtherMetadataProvidersForName(::Platform::String^ typeName)
{
    for (unsigned int i = 0; i < OtherProviders->Size; i++)
    {
        auto xamlType = OtherProviders->GetAt(i)->GetXamlType(typeName);
        if(xamlType != nullptr)
        {
            return xamlType;
        }
    }
    return nullptr;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CheckOtherMetadataProvidersForType(::Windows::UI::Xaml::Interop::TypeName t)
{
    for (unsigned int i = 0; i < OtherProviders->Size; i++)
    {
        auto xamlType = OtherProviders->GetAt(i)->GetXamlType(t);
        if(xamlType != nullptr)
        {
            return xamlType;
        }
    }
    return nullptr;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlType(::Platform::String^ typeName)
{
    if (typeName == L"Windows.UI.Xaml.Controls.UserControl")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Controls.Page")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Boolean")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Object")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"String")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Win8Snes9x.AudioSettingsPane")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.Controls.UserControl"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Win8Snes9x::AudioSettingsPane(); 
            };
        return userType;
    }

    if (typeName == L"Win8Snes9x.DirectXPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Win8Snes9x::DirectXPage(); 
            };
        return userType;
    }

    if (typeName == L"Win8Snes9x.GeneralSettingsPane")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.Controls.UserControl"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Win8Snes9x::GeneralSettingsPane(); 
            };
        return userType;
    }

    if (typeName == L"Win8Snes9x.AboutSettingsPane")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.Controls.UserControl"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Win8Snes9x::AboutSettingsPane(); 
            };
        return userType;
    }

    if (typeName == L"Win8Snes9x.InputSettingsPane")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.Controls.UserControl"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Win8Snes9x::InputSettingsPane(); 
            };
        return userType;
    }

    if (typeName == L"Win8Snes9x.SelectROMPane")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.Controls.UserControl"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Win8Snes9x::SelectROMPane(); 
            };
        userType->AddMemberName(L"Cancelled");
        userType->AddMemberName(L"ROMSelected");
        return userType;
    }

    if (typeName == L"Win8Snes9x.ROMSelectedDelegate")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"System.MulticastDelegate"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        return userType;
    }

    if (typeName == L"System.MulticastDelegate")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"System.Delegate"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        return userType;
    }

    if (typeName == L"System.Delegate")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        return userType;
    }

    if (typeName == L"Win8Snes9x.SelectStatePane")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.Controls.UserControl"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Win8Snes9x::SelectStatePane(); 
            };
        userType->AddMemberName(L"SavestateSelected");
        return userType;
    }

    if (typeName == L"Win8Snes9x.SavestateSelected")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"System.MulticastDelegate"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        return userType;
    }

    if (typeName == L"Win8Snes9x.SnappedPane")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.Controls.UserControl"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Win8Snes9x::SnappedPane(); 
            };
        return userType;
    }

    if (typeName == L"Win8Snes9x.VideoSettingsPane")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.Controls.UserControl"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Win8Snes9x::VideoSettingsPane(); 
            };
        return userType;
    }

    if (typeName == L"Win8Snes9x.StorageFolderModel")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"Path");
        userType->AddMemberName(L"Name");
        userType->AddMemberName(L"Folder");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Windows.Storage.StorageFolder")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        return userType;
    }

    if (typeName == L"Win8Snes9x.StorageFileModel")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"Path");
        userType->AddMemberName(L"Name");
        userType->AddMemberName(L"Folder");
        userType->AddMemberName(L"File");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Windows.Storage.StorageFile")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        return userType;
    }

    return nullptr;
}

::Windows::UI::Xaml::Markup::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlMember(::Platform::String^ longMemberName)
{
    if (longMemberName == L"Win8Snes9x.SelectROMPane.Cancelled")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Cancelled", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Win8Snes9x::SelectROMPane^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->Cancelled);
                return value;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Win8Snes9x::SelectROMPane^)instance;
                auto boxedValue = (::Platform::IBox<::Platform::Boolean>^)value;
                that->Cancelled = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Win8Snes9x.SelectROMPane.ROMSelected")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"ROMSelected", L"Win8Snes9x.ROMSelectedDelegate");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Win8Snes9x::SelectROMPane^)instance;
                return that->ROMSelected;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Win8Snes9x::SelectROMPane^)instance;
                that->ROMSelected = (::Win8Snes9x::ROMSelectedDelegate^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Win8Snes9x.SelectStatePane.SavestateSelected")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"SavestateSelected", L"Win8Snes9x.SavestateSelected");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Win8Snes9x::SelectStatePane^)instance;
                return that->SavestateSelected;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Win8Snes9x::SelectStatePane^)instance;
                that->SavestateSelected = (::Win8Snes9x::SavestateSelected^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Win8Snes9x.StorageFolderModel.Path")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Path", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Win8Snes9x::StorageFolderModel^)instance;
                return that->Path;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Win8Snes9x.StorageFolderModel.Name")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Name", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Win8Snes9x::StorageFolderModel^)instance;
                return that->Name;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Win8Snes9x.StorageFolderModel.Folder")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Folder", L"Windows.Storage.StorageFolder");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Win8Snes9x::StorageFolderModel^)instance;
                return that->Folder;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Win8Snes9x::StorageFolderModel^)instance;
                that->Folder = (::Windows::Storage::StorageFolder^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Win8Snes9x.StorageFileModel.Path")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Path", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Win8Snes9x::StorageFileModel^)instance;
                return that->Path;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Win8Snes9x.StorageFileModel.Name")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Name", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Win8Snes9x::StorageFileModel^)instance;
                return that->Name;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Win8Snes9x.StorageFileModel.Folder")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Folder", L"Windows.Storage.StorageFolder");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Win8Snes9x::StorageFileModel^)instance;
                return that->Folder;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Win8Snes9x::StorageFileModel^)instance;
                that->Folder = (::Windows::Storage::StorageFolder^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Win8Snes9x.StorageFileModel.File")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"File", L"Windows.Storage.StorageFile");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Win8Snes9x::StorageFileModel^)instance;
                return that->File;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Win8Snes9x::StorageFileModel^)instance;
                that->File = (::Windows::Storage::StorageFile^)value;
            };
        return xamlMember;
    }

    return nullptr;
}

